;;; corfu-nerd-icons.el  -*- lexical-binding: t; -*-

(require 'nerd-icons)

(defvar corfu-nerd-icons--icons
  '((array          "nf-cod-symbol_array"       font-lock-type-face)
    (boolean        "nf-cod-symbol_boolean"     font-lock-builtin-face)
    (class          "nf-cod-symbol_class"       font-lock-type-face)
    (color          "nf-cod-symbol_color"       success)
    (command        "nf-cod-terminal"           default)
    (constant       "nf-cod-symbol_constant"    font-lock-constant-face)
    (constructor    "nf-cod-triangle_right"     font-lock-function-name-face)
    (enummember     "nf-cod-symbol_enum_member" font-lock-builtin-face)
    (enum-member    "nf-cod-symbol_enum_member" font-lock-builtin-face)
    (enum           "nf-cod-symbol_enum"        font-lock-builtin-face)
    (event          "nf-cod-symbol_event"       font-lock-warning-face)
    (field          "nf-cod-symbol_field"       font-lock-variable-name-face)
    (file           nerd-icons-icon-for-file    font-lock-string-face)
    (folder         nerd-icons-icon-for-dir     font-lock-string-face)
    (interface      "nf-cod-symbol_interface"   font-lock-type-face)
    (keyword        "nf-cod-symbol_keyword"     font-lock-keyword-face)
    (macro          "nf-cod-symbol_misc"        font-lock-keyword-face)
    (magic          "nf-cod-wand"               font-lock-builtin-face)
    (method         "nf-cod-symbol_method"      font-lock-function-name-face)
    (function       "nf-cod-symbol_method"      font-lock-function-name-face)
    (module         "nf-cod-file_submodule"     font-lock-preprocessor-face)
    (numeric        "nf-cod-symbol_numeric"     font-lock-builtin-face)
    (operator       "nf-cod-symbol_operator"    font-lock-comment-delimiter-face)
    (param          "nf-cod-symbol_parameter"   default)
    (property       "nf-cod-symbol_property"    font-lock-variable-name-face)
    (reference      "nf-cod-references"         font-lock-variable-name-face)
    (snippet        "nf-cod-symbol_snippet"     font-lock-string-face)
    (string         "nf-cod-symbol_string"      font-lock-string-face)
    (struct         "nf-cod-symbol_structure"   font-lock-variable-name-face)
    (text           "nf-cod-text_size"          font-lock-doc-face)
    (typeparameter  "nf-cod-list_unordered"     font-lock-type-face)
    (type-parameter "nf-cod-list_unordered"     font-lock-type-face)
    (unit           "nf-cod-symbol_ruler"       font-lock-constant-face)
    (value          "nf-cod-symbol_field"       font-lock-builtin-face)
    (variable       "nf-cod-symbol_variable"    font-lock-variable-name-face)))

(defun corfu-nerd-icons-margin-formatter (_)
  (when-let* ((kind-func (plist-get completion-extra-properties :company-kind)))
    (lambda (cand)
      (pcase-let* ((kind (funcall kind-func cand))
                   (`(_ ,name ,face) (assoc kind corfu-nerd-icons--icons))
                   (icon (if (and name (symbolp name))
                             (funcall name (substring-no-properties cand))
                           (nerd-icons-codicon (or name "nf-cod-code") :face (or face 'font-lock-builtin-face))))
                   (space (lambda (w &optional d)
                            (if (display-graphic-p) (propertize " " 'display `(space :width ,w)) d))))
        (concat (funcall space 0.2) icon (funcall space 0.5 " "))))))

(add-to-list 'corfu-margin-formatters #'corfu-nerd-icons-margin-formatter)

(provide 'corfu-nerd-icons)

;;; corfu-nerd-icons.el ends here
